"""rebase migrations

Revision ID: b1c0f99b3888
Revises:
Create Date: 2025-03-28 14:15:27.248620

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b1c0f99b3888'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('TEXTAREA', 'CHOOSE_ONE_FROM_LIST', 'CHOOSE_ONE_FROM_LIST_OTHER', 'INPUT', 'ADD_TO_A_LIST', 'CHOOSE_MULTIPLE_FROM_LIST', name='questiontype').create(op.get_bind())
    sa.Enum('DAILY', 'WEEKLY', 'FORTNIGHTLY', 'MONTHLY', 'EVERY_6_WEEKS', 'QUARTERLY', 'EVERY_6_MONTHS', 'ANNUALLY', 'EVERY_2_YEARS', 'AD_HOC', 'UNKNOWN', name='frequencyofupdates').create(op.get_bind())
    sa.Enum('BACKLOG', 'SCREEN', 'RESEARCH', 'CO_DESIGN', 'TEST_AND_ITERATE', 'READY_FOR_GO_NO_GO', 'PREPARED_FOR_PLATFORM', 'ON_THE_PLATFORM', 'ARCHIVED', name='stage').create(op.get_bind())
    op.create_table('consideration',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('synonyms', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('github_discussion_number', sa.Integer(), nullable=True),
    sa.Column('stage', postgresql.ENUM('BACKLOG', 'SCREEN', 'RESEARCH', 'CO_DESIGN', 'TEST_AND_ITERATE', 'READY_FOR_GO_NO_GO', 'PREPARED_FOR_PLATFORM', 'ON_THE_PLATFORM', 'ARCHIVED', name='stage', create_type=False), nullable=False),
    sa.Column('public', sa.Boolean(), nullable=False),
    sa.Column('expected_number_of_records', sa.Integer(), nullable=True),
    sa.Column('frequency_of_updates', postgresql.ENUM('DAILY', 'WEEKLY', 'FORTNIGHTLY', 'MONTHLY', 'EVERY_6_WEEKS', 'QUARTERLY', 'EVERY_6_MONTHS', 'ANNUALLY', 'EVERY_2_YEARS', 'AD_HOC', 'UNKNOWN', name='frequencyofupdates', create_type=False), nullable=True),
    sa.Column('prioritised', sa.Boolean(), nullable=False),
    sa.Column('datasets', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('specification', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('useful_links', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('legislation', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('slug', sa.Text(), nullable=True),
    sa.Column('blocked_reason', sa.Text(), nullable=True),
    sa.Column('os_declaration', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_local_land_charge', sa.Boolean(), nullable=False),
    sa.Column('is_local_plan_data', sa.Boolean(), nullable=False),
    sa.Column('created', sa.Date(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=True),
    sa.Column('deleted_date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('performance',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('considerations', sa.Integer(), nullable=False),
    sa.Column('backlog', sa.Integer(), nullable=False),
    sa.Column('screen', sa.Integer(), nullable=False),
    sa.Column('research', sa.Integer(), nullable=False),
    sa.Column('co_design', sa.Integer(), nullable=False),
    sa.Column('test_and_iterate', sa.Integer(), nullable=False),
    sa.Column('ready_for_go_no_go', sa.Integer(), nullable=False),
    sa.Column('prepared_for_platform', sa.Integer(), nullable=False),
    sa.Column('on_the_platform', sa.Integer(), nullable=False),
    sa.Column('archived', sa.Integer(), nullable=False),
    sa.Column('blocked', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('question',
    sa.Column('slug', sa.Text(), nullable=False),
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('stage', postgresql.ENUM('BACKLOG', 'SCREEN', 'RESEARCH', 'CO_DESIGN', 'TEST_AND_ITERATE', 'READY_FOR_GO_NO_GO', 'PREPARED_FOR_PLATFORM', 'ON_THE_PLATFORM', 'ARCHIVED', name='stage', create_type=False), nullable=False),
    sa.Column('question_type', postgresql.ENUM('TEXTAREA', 'CHOOSE_ONE_FROM_LIST', 'CHOOSE_ONE_FROM_LIST_OTHER', 'INPUT', 'ADD_TO_A_LIST', 'CHOOSE_MULTIPLE_FROM_LIST', name='questiontype', create_type=False), nullable=False),
    sa.Column('hint', sa.Text(), nullable=True),
    sa.Column('python_form', sa.Text(), nullable=True),
    sa.Column('next', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('previous', sa.Text(), nullable=True),
    sa.Column('choices', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('order', sa.Integer(), nullable=True),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=True),
    sa.Column('deleted_date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('slug')
    )
    op.create_table('tag',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('answer',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('answer', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('answer_list', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('consideration_id', sa.UUID(), nullable=False),
    sa.Column('question_slug', sa.Text(), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=True),
    sa.Column('deleted_date', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['consideration_id'], ['consideration.id'], ),
    sa.ForeignKeyConstraint(['question_slug'], ['question.slug'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('change_log',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('field', sa.Text(), nullable=False),
    sa.Column('change', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('reason', sa.Text(), nullable=True),
    sa.Column('consideration_id', sa.UUID(), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('user', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['consideration_id'], ['consideration.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('consideration_tags',
    sa.Column('consideration_id', sa.UUID(), nullable=True),
    sa.Column('tag_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['consideration_id'], ['consideration.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], )
    )
    op.create_table('note',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('consideration_id', sa.UUID(), nullable=False),
    sa.Column('author', sa.Text(), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=True),
    sa.Column('deleted_date', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['consideration_id'], ['consideration.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('note')
    op.drop_table('consideration_tags')
    op.drop_table('change_log')
    op.drop_table('answer')
    op.drop_table('tag')
    op.drop_table('question')
    op.drop_table('performance')
    op.drop_table('consideration')
    sa.Enum('BACKLOG', 'SCREEN', 'RESEARCH', 'CO_DESIGN', 'TEST_AND_ITERATE', 'READY_FOR_GO_NO_GO', 'PREPARED_FOR_PLATFORM', 'ON_THE_PLATFORM', 'ARCHIVED', name='stage').drop(op.get_bind())
    sa.Enum('DAILY', 'WEEKLY', 'FORTNIGHTLY', 'MONTHLY', 'EVERY_6_WEEKS', 'QUARTERLY', 'EVERY_6_MONTHS', 'ANNUALLY', 'EVERY_2_YEARS', 'AD_HOC', 'UNKNOWN', name='frequencyofupdates').drop(op.get_bind())
    sa.Enum('TEXTAREA', 'CHOOSE_ONE_FROM_LIST', 'CHOOSE_ONE_FROM_LIST_OTHER', 'INPUT', 'ADD_TO_A_LIST', 'CHOOSE_MULTIPLE_FROM_LIST', name='questiontype').drop(op.get_bind())
    # ### end Alembic commands ###
